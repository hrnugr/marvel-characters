{"version":3,"sources":["components/SearchBar.js","components/CharacterListItem.js","components/CharacterList.js","components/Detail.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","onInputChange","searchedKey","setState","handleKeyPress","event","key","onSearchButtonClick","state","className","value","this","onChange","e","target","onKeyPress","type","onClick","Component","CharacterListItem","handleChangeSelectedCharacter","character","src","thumbnail","path","extension","alt","name","description","length","substr","CharacterList","console","log","characters","lodash","map","id","Detail","series","available","comics","items","comic","resourceURI","API_URL","publicKey","auth","md5","App","componentDidMount","GetInitialChararcters","$","getJSON","result","fetchedCharacters","data","results","selectedCharacter","bind","role","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6ef026e1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n class SearchBar extends Component {\r\n     constructor(props){\r\n         super(props);\r\n         this.state = {\r\n             searchedKey:''\r\n        };\r\n     }\r\n     onInputChange = (searchedKey) => {\r\n        this.setState({ searchedKey:searchedKey });\r\n      }\r\n      handleKeyPress = event =>{\r\n        if(event.key ==='Enter'){\r\n            this.props.onSearchButtonClick(this.state.searchedKey);\r\n            this.setState({searchedKey:''});\r\n        }\r\n      }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-3 col-md-3\" ></div>\r\n                <div className=\"col-sm-5 col-sm-offset-2 col-md-6 search-bar\">\r\n                    <div className=\"input-group\">\r\n                        <input className=\"form-control input-lg\" value={this.state.searchedKey} \r\n                                onChange={e => this.onInputChange(e.target.value)} onKeyPress={this.handleKeyPress}/>\r\n                        <button type=\"submit\" className=\"btn btn-primary\" onClick={() => this.props.onSearchButtonClick(this.state.searchedKey)}>Search</button>   \r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default  SearchBar;","import React from 'react'\r\n\r\nconst CharacterListItem = props => {\r\n   // const { character } = props.character;\r\n    return (\r\n      <div className=\"list-item\" onClick={()=>props.handleChangeSelectedCharacter(props.character)}>\r\n        <div className=\"row\">\r\n          <div className=\"col-md-3\">\r\n            <img\r\n              src={`${props.character.thumbnail.path}/portrait_medium.${props.character.thumbnail.extension}`}\r\n              alt={props.character.name}\r\n            />\r\n          </div>\r\n          <div className=\"col-md-8\">\r\n            <div className=\"row\">\r\n              <div className=\"col-md-12\">\r\n                <h3>{props.character.name}</h3>\r\n                <p>{props.character.description && props.character.description.length > 50\r\n                  ? props.character.description.substr(0, 50) + '...' : props.character.description}\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\nexport default CharacterListItem;","import React from 'react'\r\nimport lodash from 'lodash'\r\n\r\nimport CharacterListItem from './CharacterListItem'\r\n\r\nconst CharacterList = props => {\r\n    console.log(props.characters);\r\n        return (\r\n            \r\n                <div className=\"col-md-4\">\r\n                    {lodash.map(props.characters,character => (\r\n                        <CharacterListItem  key={character.id} character={character} handleChangeSelectedCharacter={props.handleChangeSelectedCharacter}/>\r\n                    ))}\r\n                </div>\r\n           \r\n        );\r\n    \r\n};\r\nexport default CharacterList;","import React from 'react'\r\nimport lodash from 'lodash';\r\n\r\nconst Detail = props => {\r\n\r\n    return (\r\n            <div className=\"col-md-8\">\r\n                <div className=\"details\">\r\n                <div className=\"row\">\r\n                    <div className=\"col-md-12\">\r\n                    <h1>\r\n                        {props.character.name}\r\n                        <hr />\r\n                    </h1>\r\n                    </div>\r\n                    <div className=\"col-md-5\">\r\n                    <img\r\n                        src={`${props.character.thumbnail.path}/portrait_uncanny.${props.character.thumbnail.extension}`}\r\n                        alt={props.character.name}\r\n                    />\r\n                    </div>\r\n                    <div className=\"col-md-7\">\r\n                    <p>{props.character.description}</p>\r\n                    <h4>Comics({props.character.series.available})</h4>\r\n                    <ul>\r\n                        {lodash.map(props.character.comics.items, comic => (\r\n                        <li key={comic.resourceURI}>{comic.name}</li>\r\n                        ))}\r\n                    </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         </div>\r\n    );\r\n  };\r\n\r\nexport default Detail;","import React , {Component} from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport md5 from 'md5';\r\nimport $ from 'jquery';\r\n\r\n\r\n\r\nimport SearchBar from './components/SearchBar'\r\nimport CharacterList from './components/CharacterList'\r\nimport Detail from './components/Detail'\r\n\r\nconst API_URL = 'https://gateway.marvel.com:443/v1/public/characters?';\r\nconst publicKey = 'b55da60dbc60b7c8dde1a4dfe153938f';\r\nconst privateKey = '08053009117dcda36e856e87eb90e8dd8ba0ef9a';\r\nconst ts = '1';\r\nconst auth = `ts=${ts}&apikey=${publicKey}&hash=${md5(`${ts}${privateKey}${publicKey}`)}`;\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      characters: null,\r\n      selectedCharacter:null,\r\n    };\r\n    this.handleChangeSelectedCharacter = this.handleChangeSelectedCharacter.bind(this);\r\n  }\r\n\r\n  componentDidMount = () => { //componentler render edilmeden önce çalışır.\r\n    this.GetInitialChararcters();\r\n  };\r\n\r\n  GetInitialChararcters = () =>{\r\n    $.getJSON(`${API_URL}${auth}&limit=5`, result => {\r\n      const fetchedCharacters = result.data.results;\r\n      this.setState({ characters: fetchedCharacters });\r\n    });\r\n  }\r\n\r\n  onSearchButtonClick = (searchedKey) =>{\r\n    $.getJSON(`${API_URL}${auth}&limit=5&nameStartsWith=${searchedKey}`, result => {\r\n      const fetchedCharacters = result.data.results;\r\n      this.setState({ characters: fetchedCharacters });\r\n    });\r\n  }\r\n\r\n  handleChangeSelectedCharacter = (character) =>{\r\n    this.setState({selectedCharacter:character});\r\n  }\r\n\r\n  render() {\r\n    if(!this.state.characters)\r\n      return (\r\n        <div className=\"text-center\">\r\n          <div className=\"spinner-border\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n          </div>\r\n        </div>\r\n      );\r\n    return (\r\n      <div className=\"container\">\r\n          <SearchBar onSearchButtonClick={this.onSearchButtonClick}/> \r\n          <div className=\"row\">\r\n             <CharacterList characters={this.state.characters} handleChangeSelectedCharacter={this.handleChangeSelectedCharacter}/>\r\n             <Detail character ={this.state.selectedCharacter || this.state.characters[0]}/>\r\n          </div>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}